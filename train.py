# Machine Learning Term Project# Batch No: 6# Prabhjyot Singh Sodhi 2013A7PS151P# Chandradeo Arya 2013A7PS015P# Tanmay Utkarsh 2014A3PS300P# filename: train.py# main file to train and test multiple modelsfrom scipy.io import wavfileimport numpy as npfrom matplotlib import pyplotfrom scipy.fftpack import fftfrom features import mfccfrom sklearn.ensemble import RandomForestClassifierimport cPickle as picklefrom collections import Counterfrom sklearn import svmfrom sklearn import treefrom time import sleepimport os# OWN fndef plot_wav(filename):    sample_rate, wav_data = wavfile.read(filename)    pyplot.plot(wav_data)    pyplot.show()# OWN fndef plot_fft(filename):    sample_rate, wav_data = wavfile.read(filename)    fft_data = fft(wav_data)    pyplot.plot(wav_data, np.abs(fft_data))    pyplot.show()# OWN fndef load_model():    model_file = open('model', 'rb')    clf = pickle.load(model_file)    return clf# OWN fndef get_training_data():    os.chdir('audio_data/training')    file_list = os.listdir('.')    training_features = []    targets = []    for fil in file_list:        sample_rate, wav_data = wavfile.read(fil)        mffc_data = mfcc(wav_data, sample_rate)        for x in range(mffc_data.shape[0]):            training_features.append(mffc_data[x].tolist())            # hardcoded for files of type name_6.wav            targets.append(fil[:-6])    os.chdir('../../')    return (training_features, targets)# OWN fndef train_new_dt(training_features, targets):    new_dt = tree.DecisionTreeClassifier( )    new_dt = new_dt.fit(training_features, targets)    print "Decision Tree ready!"    return new_dt# OWN fndef train_new_svm(training_features, targets):    new_svm = svm.LinearSVC(max_iter=200, verbose=3)    new_svm.fit(training_features, targets)    print "SVC has been created"    return new_svm# OWN fndef train_new_rf(training_features, targets, num_tree):    new_forest = RandomForestClassifier(n_estimators=num_tree, n_jobs=6)    new_forest.fit(training_features, targets)    # with open('model', 'wb') as model_file:    #     pickle.dump(new_forest, model_file)    # print "model object has been saved to file: 'model'!"    print "Random Forest has been created"    return new_forest# OWN fndef check_accuracy(classifier):    os.chdir('audio_data/testing')    correct = 0.0    wrong = 0.0    files_list = os.listdir('.')    for fil in files_list:        ans = test(classifier, fil)        if ans in fil:            correct += 1        else:            wrong += 1    # print "Correct predictions: " +  str(correct)    # print "Wrong predictons: " + str(wrong)    print "Accuracy: " + str((correct/(correct + wrong)))    os.chdir('../../')    return correct/(correct + wrong)# OWN fndef driver():    print "Welcome!"    print "Loading data ..."    model = []    (training_features, targets) = get_training_data()    print "\n"    while True:        print "1) Check Accuracy for Decision Tree Classifier"        print "2) Check Accuracy for SVC"        print "3) Check Accuracy for Random Forest Classifier"        print "4) Add new training data"        print "5) Test on particular file"        print "6) Generate Random Forest graph"        print "7) Exit\n"        print "Please enter choice"        choice = raw_input()        try:            choice = int(choice)        except:            print "Please enter a valid option"            import sys            sys.exit(0)        if (choice == 1):            print "Accuracy for Decision Tree classifier is:"            dt = train_new_dt(training_features, targets)            tree.export_graphviz(dt, max_depth=5)            print "Find the constructed tree in file: tree.dot"            check_accuracy(dt)        elif choice == 2:            print "Beware: This takes excrutiatingly long :("            new_svm = train_new_svm(training_features, targets)            check_accuracy(new_svm)        elif choice == 3:            print "Accuracy for Random Forest ensemble classifier is:"            check_accuracy(train_new_rf(training_features, targets, 20))        elif choice == 4:            print "Feature not yet out"            print "As of now, we'll need to manually add more wav files to the training folder"        elif choice ==  5:            if type(model) is list:                print "Processing ..."                model = train_new_dt(training_features, targets)            fil = raw_input("Enter name of the wav file to be tested, (make sure it is present in the testing folder)\n")            print "Speaker name/id is: " + test(model, "audio_data/testing/" + fil + ".wav")        elif choice == 6:            treesize = range(2, 23)            accr = [0.797619047619, 0.779761904762, 0.803571428571, 0.839285714286, 0.880952380952, 0.904761904762, 0.922619047619, 0.922619047619, 0.928571428571, 0.934523809524, 0.940476190476, 0.940476190476, 0.946428571429, 0.940476190476, 0.952380952381, 0.940476190476, 0.952380952381, 0.952380952381, 0.952380952381, 0.946428571429, 0.952380952381]            # uncomment the lines below to allow regenration of accuracy data for different values of n_estimators1            # treesize = range(2, 23)            # accr = []            # for x in treesize:            #     print "training rf sized: " + str(x)            #     rf = train_new_rf(training_features, targets, x)            #     print "Accuracy for rf sized: " + str(x)            #     accr.append(check_accuracy(rf))            from matplotlib import pyplot as plt            plt.plot(treesize, accr)            plt.xlabel('Number of trees employed in the ensemble model')            plt.ylabel('Accuracy reported on given test dataset')            plt.title("Plot to show how accuracy varies with number of trees in the forest")            plt.show()        elif choice == 7:            import sys            print "Thank you!"            sys.exit(0)        else:            print "Invalid Choice :("        sleep(2)        print "\n\n"# OWN fndef test(classifier, fil):    try:        sample_rate, wav_data = wavfile.read(fil)    except:        print "File: " + fil + " not found"        import sys        sys.exit(0)    mffc_data = mfcc(wav_data, sample_rate)    tobepredicted = np.zeros(shape=mffc_data.shape)    for x in range(mffc_data.shape[0]):        tobepredicted[x] = mffc_data[x].tolist()    predicted = classifier.predict(tobepredicted)    data = Counter(predicted)    # uncomment below to print result for each of the tests too    # print data.most_common(1)    return data.most_common(1)[0][0]if __name__ == '__main__':    driver()